{"version":3,"sources":["components/reboot/reboot.js","components/log/log.js","components/uploadTwin/uploadTwin.js","components/common/styledProgressBar.js","components/update/update.js","components/fileupload/fileupload.js","components/setlog/setlog.js","components/main/main.js","components/malls/malls.js","App.js","serviceWorker.js","index.js","components/update/play.svg","components/setlog/play.svg"],"names":["process","REACT_APP_VM_SERVER","REACT_APP_REBOOT","Component","REACT_APP_UPDATE_REBOOT","REACT_APP_UPDATE_TWIN","UploadTwin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateTwin","e","preventDefault","_this$state","state","softwareVersion","url","reboot","alert","setState","updateTwinLoading","axios","method","headers","Access-Control-Allow-Origin","Content-Type","Access-Control-Allow-Headers","Access-Control-Allow-Methods","data","software_version","then","response","console","log","catch","err","handleInput","_e$target","target","name","value","_this$state2","react_default","a","createElement","onSubmit","className","htmlFor","type","id","aria-describedby","placeholder","onChange","StyledProgressbar","dist_default","percentage","text","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","fontSize","REACT_APP_GETSTATUS","REACT_APP_SERVER","REACT_APP_GETBLOBS","REACT_APP_UPLOADBLOB","columns","Header","accessor","resizable","Cell","href","concat","Main","scanCode","status","showCam","handleScan","history","push","handleError","error","result","navigator","getUserMedia","video","localMediaStream","_this2","role","Link","to","style","width","lib_default","delay","onError","onScan","height","ref","stream","videoStream","onClick","Malls","paddingTop","react_responsive_carousel_lib","showArrows","showThumbs","src","react_materialize_lib","accordion","expanded","header","node","data-field","marginRight","waves","App","BrowserRouter","Switch","Route","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ba2ecb5c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nconst { REACT_APP_VM_SERVER, REACT_APP_REBOOT } = process.env;\n\nexport default class Reboot extends Component {\n  state = {\n    rebootStatus: [],\n    rebootStatusLoading: false\n  };\n  componentWillMount() {\n    this.getStatus();\n  }\n\n  getStatus = () => {\n    this.setState({ rebootStatusLoading: true });\n    axios({\n      method: \"get\",\n      url: REACT_APP_VM_SERVER + REACT_APP_REBOOT\n    })\n      .then(response => {\n        console.log(response);\n        this.setState({ rebootStatus: [{ ...response.data }] });\n        this.setState({ rebootStatusLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ rebootStatusLoading: false });\n      });\n  };\n  showStatus = (status, key) => {\n    return (\n      <div index={key}>\n        <p><b>Reboot status:</b>&nbsp;<span>{status.status?status.status:'--'}</span></p><br/>\n        <p><b>Reboot type:</b>&nbsp;<span>{status.rebootType}</span></p>\n      </div>\n    )\n  }\n  render() {\n    const { rebootStatus, rebootStatusLoading } = this.state;\n    return (\n      <div className=\"box-it\">\n        {rebootStatus.length ? (\n          rebootStatus.map((status, index) => this.showStatus(status, index))\n        ) : (\n          <div>\n            <p><b>Reboot status:</b>&nbsp;<span>{'--'}</span></p><br/>\n            <p><b>Reboot type:</b>&nbsp;<span>{'--'}</span></p>\n          </div>\n        )}\n        <button type=\"button\" className=\"fluid-btn\" onClick={this.getStatus}>\n          {rebootStatusLoading ? \"Refreshing..\" : \"Refresh\"}\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./log.css\";\nconst { REACT_APP_VM_SERVER, REACT_APP_UPDATE_REBOOT } = process.env;\n\nexport default class UploadTwin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deviceID: \"\",\n      message: \"\",\n      logging:false\n    };\n  }\n  logMessage = e => {\n    e.preventDefault();\n    const { deviceID, message } = this.state;\n      this.setState({ logging: true });\n      axios({\n        method: \"post\",\n        url: REACT_APP_VM_SERVER + 'updatereboot',\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Headers\":\"Authorization, Content-Type\",\n          \"Access-Control-Allow-Methods\": \"POST\"\n        },\n        data: {\n          \"reboot\": \"true\"\n        }\n      })\n        .then(response => {\n          console.log(response);\n          alert('Reboot successfully')\n          this.setState({ logging: false, deviceID:'', message:'' });\n        })\n        .catch(err => {\n          console.log(err);\n          alert('Error in Reboot.')\n          this.setState({ logging: false });\n        });\n  };\n  handleInput = e => {\n    const { name, value } = e.target;\n    if (name === \"deviceID\") {\n      this.setState({ deviceID: value });\n    }else if (name === \"message\") {\n      this.setState({ message: value });\n    }\n  };\n  render() {\n    const { deviceID, message, logging } = this.state;\n    return (\n      <div className=\"box-it\">\n        <form onSubmit={this.logMessage}>\n          {\n            /*\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"deviceID\"\n              value={deviceID}\n              name=\"deviceID\"\n              placeholder=\"Enter device ID..\"\n              onChange={this.handleInput}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              value={message}\n              name=\"message\"\n              className=\"form-control\"\n              id=\"message\"\n              placeholder=\"Enter message..\"\n              onChange={this.handleInput}\n            />\n          </div>\n          */\n          }\n          <button type=\"submit\" className=\"cust-btn\">\n            {logging?'Rebooting..':'Reboot'}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./uploadTwin.css\";\nconst { REACT_APP_VM_SERVER, REACT_APP_UPDATE_TWIN } = process.env;\n\nexport default class UploadTwin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      softwareVersion: \"1.0.0.006\",\n      updateTwinLoading: false,\n      reboot:\"True\",\n      url:\n        \"https://wrdm2chetanpackage.blob.core.windows.net/wrdm2-package-file-chetan/package.tar.gz\"\n    };\n  }\n  updateTwin = e => {\n    e.preventDefault();\n    const { softwareVersion, url, reboot } = this.state;\n    if (softwareVersion === \"\" || url === \"\") {\n      alert(\"Please enter all the fields\");\n    } else {\n      this.setState({ updateTwinLoading: true });\n      axios({\n        method: \"post\",\n        url: REACT_APP_VM_SERVER + REACT_APP_UPDATE_TWIN ,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Headers\":\"Authorization, Content-Type\",\n          \"Access-Control-Allow-Methods\": \"POST\"\n        },\n        data: {\n          software_version: softwareVersion,\n          url: url\n          //reboot: reboot\n        }\n      })\n        .then(response => {\n          console.log(response);\n          alert('Firmware updated successfully')\n          this.setState({ updateTwinLoading: false });\n        })\n        .catch(err => {\n          console.log(err);\n          alert('Error in Firmware update')\n          this.setState({ updateTwinLoading: false });\n        });\n    }\n  };\n  handleInput = e => {\n    const { name, value } = e.target;\n    if (name === \"url\") {\n      this.setState({ url: value });\n    }\n    if (name === \"reboot\") {\n      this.setState({ reboot: value });\n    }\n    if (name === \"softwareVersion\") {\n      this.setState({ softwareVersion: value });\n    }\n  };\n  render() {\n    const { url, softwareVersion, updateTwinLoading, reboot } = this.state;\n    return (\n      <div>\n        <form onSubmit={this.updateTwin}>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Software version</label>\n            <input\n              type=\"software-version\"\n              className=\"form-control\"\n              id=\"software\"\n              value={softwareVersion}\n              name=\"softwareVersion\"\n              aria-describedby=\"softwareHelp\"\n              placeholder=\"Enter software version\"\n              onChange={this.handleInput}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputPassword1\">Blob URL</label>\n            <input\n              type=\"text\"\n              value={url}\n              name=\"url\"\n              className=\"form-control\"\n              id=\"blobUrl\"\n              placeholder=\"Enter Blob URL\"\n              onChange={this.handleInput}\n            />\n          </div>\n          {\n            /*\n              <div className=\"form-group\">\n                <label htmlFor=\"rebootType\">Reboot</label>\n                <select className=\"form-control\" id=\"rebootType\" value={reboot}\n                  name=\"reboot\" onChange={this.handleInput}>\n                  <option>True</option>\n                  <option>False</option>\n                </select>\n              </div>\n              */\n          }\n          <button type=\"submit\" className=\"cust-btn\">\n            {updateTwinLoading?'Updating Firmware..':'Update firmware'}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport CircularProgressbar from 'react-circular-progressbar';\n\nfunction StyledProgressbar(props) {\n  return (\n    <CircularProgressbar\n      percentage={props.percentage}\n      text={props.text}\n      // Path width must be customized with strokeWidth,\n      // since it informs dimension calculations.\n      strokeWidth={5}\n      // You can override styles either by specifying this \"styles\" prop,\n      // or by overriding the default CSS here:\n      // https://github.com/iqnivek/react-circular-progressbar/blob/master/src/styles.css\n      styles={{\n        // Customize the root svg element\n        root: {},\n        // Customize the path, i.e. the part that's \"complete\"\n        path: {\n          // Tweak path color:\n          stroke: '#2c55ba',\n          // Tweak path to use flat or rounded ends:\n          strokeLinecap: 'butt',\n          // Tweak transition animation:\n          transition: 'stroke-dashoffset 0.5s ease 0s',\n        },\n        // Customize the circle behind the path\n        trail: {\n          // Tweak the trail color:\n          stroke: '#d6d6d6',\n        },\n        // Customize the text\n        text: {\n          // Tweak text color:\n          fill: '#2c55ba',\n          // Tweak text size:\n          fontSize: '30px',\n        },\n      }}\n    />\n  );\n}\nexport default StyledProgressbar;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport UploadTwin from \"../uploadTwin/uploadTwin\";\nimport \"./update.css\";\nimport StyledProgressbar from \"../common/styledProgressBar\";\nconst { REACT_APP_VM_SERVER, REACT_APP_GETSTATUS } = process.env;\nexport default class Update extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firmwareStatuses: [],\n      getFirmwareLoading: false\n    };\n  }\n\n  componentWillMount() {\n    this.getStatus();\n  }\n\n  getStatus = () => {\n    this.setState({ getFirmwareLoading: true });\n    axios({\n      method: \"get\",\n      url: REACT_APP_VM_SERVER + REACT_APP_GETSTATUS\n    })\n      .then(response => {\n        console.log(response);\n        this.setState({ firmwareStatuses: [{ ...response.data }] });\n        this.setState({ getFirmwareLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ getFirmwareLoading: false });\n      });\n  };\n\n  showStatus = (status, index) => {\n    let percentage = 0;\n    switch (status.otaStatus) {\n      case \"WaitingForUpdate\":\n        percentage = 5;\n        break;\n      case \"SoftwareUpdateinProgress\":\n        percentage = 15;\n        break;\n      case \"DownloadComplete\":\n        percentage = 25;\n        break;\n      case \"UnzipComplete\":\n        percentage = 40;\n        break;\n      case \"ReadPackageDataComplete\":\n        percentage = 55;\n        break;\n      case \"PreInstallComplete\":\n        percentage = 70;\n        break;\n      case \"InstallComplete\":\n        percentage = 85;\n        break;\n      case \"SoftwareUpdateComplete\":\n        percentage = 100;\n        break;\n      default:\n        percentage = 0;\n    }\n    return (\n      <div className=\"status-container\" key={index}>\n        <div className=\"status-details-container\">\n          <b>OTA Status: </b>\n          <span>{status.otaStatus}</span>\n          <br />\n          <b>Current version: </b>\n          <span>{status.currentVersion}</span>\n          <br />\n          <b>Pending Status: </b>\n          <span>{status.pendingVersion}</span>\n          <br />\n        </div>\n        <div style={{ width: \"76px\" }}>\n          <StyledProgressbar percentage={percentage} text={`${percentage}%`} />\n        </div>\n      </div>\n    );\n  };\n  render() {\n    const { firmwareStatuses, getFirmwareLoading } = this.state;\n    return (\n      <div>\n        <div className=\"row update-row\">\n          <div className=\"col-6\">\n            <UploadTwin />\n          </div>\n          <div className=\"col-6\">\n            <div className=\"accordion\" id=\"accordionExample\">\n              <div className=\"card\">\n                <div className=\"card-header toggle-card\" id=\"headingOne\">\n                  <div\n                    className=\"row\"\n                    style={{ cursor: \"pointer\" }}\n                    data-toggle=\"collapse\"\n                    data-target=\"#toggleFirmware\"\n                    role=\"button\"\n                    aria-expanded=\"false\"\n                    aria-controls=\"toggleFirmware\"\n                  >\n                    <img\n                      className=\"img-upload\"\n                      src={require(\"./play.svg\")}\n                      alt=\"...\"\n                      data-toggle=\"modal\"\n                      data-target=\"#showFirmwareDetails\"\n                    />\n                    <p className=\"col-10 upload-text\">Status</p>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"collapse multi-collapse\" id=\"toggleFirmware\">\n                    <div className=\"card firm-card\">\n                      <div className=\"card-body\">\n                        {firmwareStatuses.length?firmwareStatuses.map((status, index) =>\n                          this.showStatus(status, index)\n                        ):<p style={{'textAlign': 'center'}}>No records found</p>}\n                      </div>\n                      <div className=\"toogle-footer\">\n                        <button type=\"button\" className=\"cust-btn\">\n                          View Logs\n                        </button>\n                        <button type=\"button\" className=\"cust-btn\" onClick={this.getStatus}>\n                          {getFirmwareLoading?'Refreshing..':'Refresh'}\n                        </button>\n                        {/* <img\n                          className=\"close-firm\"\n                          src={require(\"./close.svg\")}\n                          title=\"close\"\n                          alt=\"...\"\n                        />\n                        <img\n                          className=\"upload-firm\"\n                          src={require(\"./upload.svg\")}\n                          title=\"upload\"\n                          alt=\"...\"\n                        />\n                        <img\n                          className=\"send-firm\"\n                          src={require(\"./send.svg\")}\n                          title=\"send\"\n                          alt=\"...\"\n                        /> */}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport \"./fileupload.css\";\nconst {\n  REACT_APP_SERVER,\n  REACT_APP_GETBLOBS,\n  REACT_APP_UPLOADBLOB\n} = process.env;\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: \"name\" // String-based value accessors!\n  },\n  {\n    Header: \"Download Link\",\n    resizable: true,\n    accessor: \"name\",\n    Cell: props => (\n      <a\n        href={`https://wrdm2chetanpackage.blob.core.windows.net/firmware/${\n          props.value\n        }`}\n      >\n        Link\n      </a>\n    )\n  },\n  {\n    Header: \"Date\",\n    accessor: \"lastModified\"\n  }\n];\nexport default class FileUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blobs: [],\n      getBlobsLoading: false,\n      uploadFirmwareLoading: false\n    };\n  }\n\n  componentWillMount() {\n    this.getBlobDetails();\n  }\n\n  uploadFirmware = () => {\n    if (this.state.selectedFile) {\n      this.setState({ uploadFirmwareLoading: true });\n      const formData = new FormData();\n      formData.append(\"firmare\", this.state.selectedFile);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Headers\":\"Authorization, Content-Type\",\n          \"Access-Control-Allow-Methods\": \"POST\"\n        }\n      };\n      axios\n        .post(REACT_APP_SERVER + REACT_APP_UPLOADBLOB, formData, config)\n        .then(response => {\n          console.log(\"ki\", response);\n          this.setState({ uploadFirmwareLoading: false });\n          if (response.data.status) {\n            alert(response.data.message);\n            this.getBlobDetails();\n          } else {\n            alert(response.data.message);\n          }\n        })\n        .catch(error => {\n          console.log(error);\n          alert(\"Error in upload\");\n          this.setState({ uploadFirmwareLoading: false });\n        });\n      document.getElementById(\"file\").value = \"\";\n      this.setState({ selectedFile: null });\n    } else {\n      alert(\"Please select a file\");\n    }\n  };\n\n  getBlobDetails = () => {\n    this.setState({ getBlobsLoading: true });\n    axios({\n      method: \"get\",\n      url: REACT_APP_SERVER + REACT_APP_GETBLOBS\n    })\n      .then(response => {\n        console.log(response);\n        if (response.data.status) {\n          this.setState({ blobs: response.data.blobs });\n        }\n        this.setState({ getBlobsLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ getBlobsLoading: false });\n      });\n  };\n\n  handleselectedFile = event => {\n    event.preventDefault();\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n  render() {\n    const { blobs, getBlobsLoading } = this.state;\n    return (\n      <div>\n        <ReactTable\n          data={blobs}\n          columns={columns}\n          pageSizeOptions={[3]}\n          loading={getBlobsLoading}\n          showPagination={true}\n          defaultPageSize={3}\n          width={170}\n          loadingText={\"Fetching firmwares..\"}\n          noDataText={\"No Firmwares found..\"}\n        />\n        <div className=\"upload-container\">\n          <label>\n            <b>Upload Firmware file to blob: </b>\n          </label>\n          <div className=\"input-group mb-3\">\n            <div className=\"custom-file\">\n              <input\n                id=\"file\"\n                type=\"file\"\n                accept=\".gz, .zip\"\n                onChange={this.handleselectedFile}\n                name=\"myFile\"\n              />\n              <br />\n              <br />\n            </div>\n            <div className=\"input-group-append\">\n              <button\n                type=\"button\"\n                className=\"cust-btn\"\n                onClick={this.uploadFirmware}\n              >\n                Upload File\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport UploadTwin from \"../uploadTwin/uploadTwin\";\r\nimport \"./setlog.css\";\r\nimport StyledProgressbar from \"../common/styledProgressBar\";\r\nconst { REACT_APP_VM_SERVER, REACT_APP_GETSTATUS } = process.env;\r\nexport default class SetLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            settime: null,\r\n            buttonstatus: false\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n    }\r\n\r\n    updateSet = e => {\r\n\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            buttonstatus: true\r\n        })\r\n\r\n        if (this.state.settime == null) {\r\n            this.setState({\r\n                buttonstatus: false, settime: null\r\n            })\r\n            alert(\"Please enter all the fields\");\r\n        } else {\r\n            this.setState({ updateTwinLoading: true });\r\n            axios({\r\n                method: \"post\",\r\n                url: \"https://wrdm2-dockerbottleapi-chetan.azurewebsites.net/updatelogtime\",\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Access-Control-Allow-Headers\": \"Authorization, Content-Type\",\r\n                    \"Access-Control-Allow-Methods\": \"POST\"\r\n                },\r\n                data: {\r\n                    time: this.state.settime\r\n                }\r\n            })\r\n                .then(response => {\r\n                    console.log(response);\r\n                    this.setState({\r\n                        buttonstatus: false, settime: null\r\n                    })\r\n                    alert(\"Updated Successfully\")\r\n                    //document.getElementById(\"software\").value=null\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    alert('Error in time update')\r\n                    this.setState({\r\n                        buttonstatus: false, settime: null\r\n                    })\r\n                });\r\n        }\r\n    }\r\n\r\n    handleInput = e => {\r\n        const { name, value } = e.target;\r\n        if (name === \"settime\") {\r\n            this.setState({ settime: value });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row update-row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"accordion\" id=\"accordionExample\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header toggle-card\" id=\"headingOne\">\r\n                                    <div\r\n                                        className=\"row\"\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                        data-toggle=\"collapse\"\r\n                                        data-target=\"#toggleFirmware\"\r\n                                        role=\"button\"\r\n                                        aria-expanded=\"false\"\r\n                                        aria-controls=\"toggleFirmware\"\r\n                                    >\r\n                                        <img\r\n                                            className=\"img-upload\"\r\n                                            src={require(\"./play.svg\")}\r\n                                            alt=\"...\"\r\n                                            data-toggle=\"modal\"\r\n                                            data-target=\"#showFirmwareDetails\"\r\n                                        />\r\n                                        <p className=\"col-8 upload-text\">Set Log Time</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    <div className=\"collapse multi-collapse\" id=\"toggleFirmware\">\r\n                                        <div className=\"card firm-card\">\r\n                                            <div className=\"card-body\">\r\n                                                <form onSubmit={this.updateSet}>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label htmlFor=\"exampleInputEmail1\">Logging Time Interval (in Min)</label>\r\n                                                        <input\r\n                                                            type=\"number\"\r\n                                                            className=\"form-control\"\r\n                                                            id=\"software\"\r\n                                                            value={this.state.settime}\r\n                                                            name=\"settime\"\r\n                                                            aria-describedby=\"softwareHelp\"\r\n                                                            placeholder=\"Duration in min\"\r\n                                                            onBlur={this.handleInput}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <button type=\"button\" className=\"cust-btn\" onClick={this.updateSet}>\r\n                                                        {this.state.buttonstatus ? \"Setting..\" : \"Set\"}\r\n                                                    </button>\r\n                                                </form>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\n\nimport Reboot from \"../reboot/reboot\";\nimport Log from \"../log/log\";\nimport Update from \"../update/update\";\nimport FileUpload from \"../fileupload/fileupload\";\nimport SetLog from \"../setlog/setlog\";\n\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCam: false,\n      result: \"No result\"\n    };\n    //this.handleScan = this.handleScan.bind(this)\n  }\n\n  componentDidMount()\n  {\n    if(navigator.getUserMedia){\n      navigator.getUserMedia(\n      {\n        video: true\n      }, \n      function(localMediaStream){}, \n      function(err){\n        alert('The following error occurred when trying to access the camera: ' + err); \n      }\n    );\n    } else {\n      alert('Sorry, browser does not support camera access');\n    }\n  }\n\n\n  scanCode = status => {\n    if (status == true) {\n      this.setState({\n        showCam: false\n      });\n    } else {\n      this.setState({\n        showCam: true\n      });\n    }\n  };\n\n  handleScan = data => {\n    if (data) {\n      this.props.history.push(\"malls\");\n    }\n  };\n  handleError = err => {\n    console.error(err);\n  };\n\n  render() {\n    return (\n      <div>\n        <nav className=\"light-blue lighten-1\" role=\"navigation\">\n          <div className=\"nav-wrapper container\">\n            <div className=\"row\" id=\"headerData\">\n              <Link to={\"/\"}>Catch By Scan</Link>\n            </div>\n          </div>\n        </nav>\n        <div className=\"section no-pad-bot\" id=\"index-banner\">\n          <div className=\"container\">\n            <div className=\"row\" id=\"centerData\">\n              <div className=\"center\" style={{ width: \"100%\" }}>\n                {this.state.showCam == true ? (\n                  <div className=\"qrDiv\">\n                    <QrReader\n                      delay={300}\n                      onError={this.handleError}\n                      onScan={this.handleScan}\n                      style={{ width: \"100%\", height: \"1px\" }}\n                      ref={(stream)=> {this.videoStream = stream}}\n                    />\n\n                    <button\n                      onClick={() => this.scanCode(this.state.showCam)}\n                      className=\"btn waves-effect waves-light\"\n                    >\n                      BACK\n                    </button>\n                  </div>\n                ) : (\n                  <button\n                    onClick={() => this.scanCode(this.state.showCam)}\n                    className=\"btn waves-effect waves-light\"\n                  >\n                    SCAN CODE\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Badge,\r\n  Collapsible,\r\n  CollapsibleItem,\r\n  Icon,\r\n  Table,\r\n  CardPanel\r\n} from \"react-materialize\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\nimport Reboot from \"../reboot/reboot\";\r\nimport Log from \"../log/log\";\r\nimport Update from \"../update/update\";\r\nimport FileUpload from \"../fileupload/fileupload\";\r\nimport SetLog from \"../setlog/setlog\";\r\n\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\n\r\nexport default class Malls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showCam: false,\r\n      result: \"No result\"\r\n    };\r\n  }\r\n  scanCode = status => {\r\n    if (status == true) {\r\n      this.setState({\r\n        showCam: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showCam: true\r\n      });\r\n    }\r\n  };\r\n\r\n  handleScan = data => {\r\n    if (data) {\r\n      alert(data);\r\n    }\r\n  };\r\n  handleError = err => {\r\n    console.error(err);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"light-blue lighten-1\" role=\"navigation\">\r\n          <div className=\"nav-wrapper container\">\r\n            <div className=\"row\" id=\"headerData\">\r\n              <Link to={'/'}>Catch By Scan</Link>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n        <div className=\"section no-pad-bot\" id=\"index-banner\">\r\n          <div className=\"container\">\r\n            <div className=\"row\" id=\"centerData\">\r\n\r\n            <div style={{ width: \"100%\", paddingTop: \"15px\" }}>\r\n                <nav className=\"row teal\">\r\n                  <div className=\"nav-wrapper\">\r\n                    <div className=\"col s12\">\r\n                      <span><b>Kormangala Forum Mall</b></span>\r\n                    </div>\r\n                  </div>\r\n                </nav>\r\n              </div>\r\n\r\n              <div className=\"silderPart\">\r\n                <Carousel showArrows={false} showThumbs={false}>\r\n                  <div>\r\n                    <img src=\"../images/callbacks.png\" />\r\n                  </div>\r\n                  <div>\r\n                    <img src=\"../images/callbackedition.png\" />\r\n                  </div>\r\n                </Carousel>\r\n              </div>\r\n\r\n              <div\r\n                className=\"floorDetails\"\r\n                style={{ width: \"100%\", paddingTop: \"15px\" }}\r\n              >\r\n                <Collapsible accordion>\r\n                  <CollapsibleItem\r\n                    expanded={false}\r\n                    header=\"Ground Floor\"\r\n                    //icon={<Icon>filter_drama</Icon>}\r\n                    node=\"div\"\r\n                  >\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th data-field=\"id\">No</th>\r\n                          <th data-field=\"name\">Left Side</th>\r\n                          <th data-field=\"price\">Right Side</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>1</td>\r\n                          <td>\r\n                            <Button\r\n                              node=\"button\"\r\n                              style={{\r\n                                marginRight: \"5px\"\r\n                              }}\r\n                              waves=\"light\"\r\n                            >\r\n                              Max\r\n                            </Button>\r\n                          </td>\r\n                          <td>\r\n                          <Button\r\n                              node=\"button\"\r\n                              style={{\r\n                                marginRight: \"5px\"\r\n                              }}\r\n                              waves=\"light\"\r\n                            >\r\n                              Levies\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </Table>\r\n                  </CollapsibleItem>\r\n                  <CollapsibleItem\r\n                    expanded={false}\r\n                    header=\"Floor 1\"\r\n                    //icon={<Icon>place</Icon>}\r\n                    node=\"div\"\r\n                  >\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th data-field=\"id\">No</th>\r\n                          <th data-field=\"name\">Left Side</th>\r\n                          <th data-field=\"price\">Right Side</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>1</td>\r\n                          <td>\r\n                            <Button\r\n                              node=\"button\"\r\n                              style={{\r\n                                marginRight: \"5px\"\r\n                              }}\r\n                              waves=\"light\"\r\n                            >\r\n                              Pantloons\r\n                            </Button>\r\n                          </td>\r\n                          <td>\r\n                          <Button\r\n                              node=\"button\"\r\n                              style={{\r\n                                marginRight: \"5px\"\r\n                              }}\r\n                              waves=\"light\"\r\n                            >\r\n                              Jokie\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </Table>\r\n                  </CollapsibleItem>\r\n                  <CollapsibleItem\r\n                    expanded={false}\r\n                    header=\"Floor 2\"\r\n                    //icon={<Icon>whatshot</Icon>}\r\n                    node=\"div\"\r\n                  >\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th data-field=\"id\">No</th>\r\n                          <th data-field=\"name\">Left Side</th>\r\n                          <th data-field=\"price\">Right Side</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>1</td>\r\n                          <td>\r\n                            <Button\r\n                              node=\"button\"\r\n                              style={{\r\n                                marginRight: \"5px\"\r\n                              }}\r\n                              waves=\"light\"\r\n                            >\r\n                              Fastrack\r\n                            </Button>\r\n                          </td>\r\n                          <td>\r\n                          <Button\r\n                              node=\"button\"\r\n                              style={{\r\n                                marginRight: \"5px\"\r\n                              }}\r\n                              waves=\"light\"\r\n                            >\r\n                              Reliance Trends\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </Table>\r\n                  </CollapsibleItem>\r\n                </Collapsible>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Main from './components/main/main';\nimport Malls from './components/malls/malls';\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route exact path=\"/malls\" component={Malls} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/play.25419525.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.25419525.svg\";"],"sourceRoot":""}